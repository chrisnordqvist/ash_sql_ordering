defmodule Angel.Repo.Migrations.PublicVersion do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    Angel.Repo.query!("CREATE SCHEMA accounts")

    create table(:users, primary_key: false, prefix: "accounts") do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:bio, :text)
      add(:email, :citext, null: false)
      add(:email_verified, :boolean, null: false, default: false)
      add(:phone, :citext, null: false)
      add(:phone_verified, :boolean, null: false, default: false)
      add(:invite_code, :citext, null: false)
      add(:first_name, :text, null: false)
      add(:last_name, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:role, :text, null: false, default: "user")

      add(
        :invited_by_id,
        references(:users,
          column: :id,
          name: "users_invited_by_id_fkey",
          type: :uuid,
          prefix: "accounts"
        )
      )
    end

    create(unique_index(:users, [:email], name: "users_email_index", prefix: "accounts"))

    create(
      unique_index(:users, [:invite_code], name: "users_invite_code_index", prefix: "accounts")
    )

    create(unique_index(:users, [:phone], name: "users_phone_index", prefix: "accounts"))

    create table(:tokens, primary_key: false, prefix: "accounts") do
      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:extra_data, :map)
      add(:purpose, :text, null: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:subject, :text, null: false)
      add(:jti, :text, null: false, primary_key: true)
    end

    create table(:relations, primary_key: false, prefix: "accounts") do
      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:circle, :text, null: false, default: "contact")

      add(
        :source_id,
        references(:users,
          column: :id,
          name: "relations_source_id_fkey",
          type: :uuid,
          prefix: "accounts"
        ),
        primary_key: true,
        null: false
      )

      add(
        :destination_id,
        references(:users,
          column: :id,
          name: "relations_destination_id_fkey",
          type: :uuid,
          prefix: "accounts"
        ),
        primary_key: true,
        null: false
      )
    end

    create(
      unique_index(:relations, [:source_id, :destination_id],
        name: "relations_source_destination_pair_index",
        prefix: "accounts"
      )
    )

    create table(:connection_requests, primary_key: false, prefix: "accounts") do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:status, :text, null: false, default: "pending")

      add(
        :source_id,
        references(:users,
          column: :id,
          name: "connection_requests_source_id_fkey",
          type: :uuid,
          prefix: "accounts",
          on_delete: :delete_all,
          on_update: :update_all
        ),
        null: false
      )

      add(
        :destination_id,
        references(:users,
          column: :id,
          name: "connection_requests_destination_id_fkey",
          type: :uuid,
          prefix: "accounts",
          on_delete: :delete_all,
          on_update: :update_all
        ),
        null: false
      )
    end

    create(
      unique_index(:connection_requests, [:source_id, :destination_id],
        name: "connection_requests_source_destination_pair_index",
        prefix: "accounts"
      )
    )
  end

  def down do
    drop_if_exists(
      unique_index(:connection_requests, [:source_id, :destination_id],
        name: "connection_requests_source_destination_pair_index",
        prefix: "accounts"
      )
    )

    drop(
      constraint(:connection_requests, "connection_requests_source_id_fkey", prefix: "accounts")
    )

    drop(
      constraint(:connection_requests, "connection_requests_destination_id_fkey",
        prefix: "accounts"
      )
    )

    drop(table(:connection_requests, prefix: "accounts"))

    drop_if_exists(
      unique_index(:relations, [:source_id, :destination_id],
        name: "relations_source_destination_pair_index",
        prefix: "accounts"
      )
    )

    drop(constraint(:relations, "relations_source_id_fkey", prefix: "accounts"))

    drop(constraint(:relations, "relations_destination_id_fkey", prefix: "accounts"))

    drop(table(:relations, prefix: "accounts"))

    drop(table(:tokens, prefix: "accounts"))

    drop_if_exists(unique_index(:users, [:phone], name: "users_phone_index", prefix: "accounts"))

    drop_if_exists(
      unique_index(:users, [:invite_code], name: "users_invite_code_index", prefix: "accounts")
    )

    drop_if_exists(unique_index(:users, [:email], name: "users_email_index", prefix: "accounts"))

    drop(constraint(:users, "users_invited_by_id_fkey", prefix: "accounts"))

    drop(table(:users, prefix: "accounts"))

    Angel.Repo.query!("DROP SCHEMA accounts")
  end
end
